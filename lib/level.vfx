\ ------------------------------------------------------------------------------

variable level#
20 stack holes  \ x , y , x , y ....

\ include actors/player.vfx

method (load) ( - )
: load  ( obj -- )  [[ (load) ]] ;

\ ------------------------------------------------------------------------------

create tile-objects  1024 cells allot&erase

: clear-tile  -1 swap ! ;

variable object-tile  \ allows objects to know the tile # that spawned them

: @objects  ( tilemap - )
    actors clear  actors in  [[
    tm-base @  tm-rows 0 do
        tm-cols 0 do
            dup @ 0 >= if
                dup @ cells tile-objects + @ ?dup if
                    over @ object-tile !  over clear-tile  
                    i ts @ tilew *  j ts @ tileh *  at   
                    ( kind ) one [[ cr .actor ]]
                then
            then
            cell+
        loop
    loop  drop ]] ;

\ ------------------------------------------------------------------------------

: csv-ints  ( $ c - a )
    here -rot  read> lines> csv> evaluate , ;

\ ------------------------------------------------------------------------------

%actor kind: %level ;kind

\ ------------------------------------------------------------------------------

100 array levels

: prefix  pad count ;

: layer,  ( a:base a:ts - )
    20 15 *tilemap drop ;

\ ( $ c ) = "suffix.ext", pad = level name
: csv-layer,  ( $ c tileset - )  
    >r s" tiled/"  prefix $+  2swap $+  csv-ints r> layer, ;

: level  ( n - <name> )
    >r  >in @ create   
    %level static,  me r> levels set  me in
        >in ! bl parse pad place ;

\ ------------------------------------------------------------------------------

: @tiles  >r dup count-tilemap r> -> tm-base @  swap move  >next ;

: @holes
    holes clear
    g1 count-tilemap 4 / 0 do  @+ dup 110 = swap 150 = or if
        i 20 mod holes push   i 15 / holes push
    then loop drop ;

%level m: (load)
    first @ g1 @tiles ( g2 @tiles a1 @tiles ) drop 
    ( a1 @objects )
    @holes ;
        
: play  ( n - )
    dup levels get dup 0= if  2drop  exit  then
    swap  level# !  load ;
