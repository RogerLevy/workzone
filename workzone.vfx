variable editing
create viewport  0 , 0 , 1920 , 1080 ,

\ ------------------------------------------------------------------------------

%actor kind: %element
  var attr
;kind

cell metafield cattr

\ ------------------------------------------------------------------------------

: fgc@  attr 1 + c@ $f and ;
: bgc@  attr 1 + c@ 4 rshift ;
: fgc!  15 and bgc@ 4 lshift or attr 1 + c! ;
: bgc!  15 and 4 lshift fgc@ or attr 1 + c! ;

\ ------------------------------------------------------------------------------

method mousedown
method click
method charkey ( unichar -- )
method dodrag
method mouseup
method rmousedown
method mousewheel ( n -- )

\ ------------------------------------------------------------------------------

%element m: charkey  drop ;
%element m: mousewheel  ;
%element m: dodrag  mdelta x v+! ;

\ ------------------------------------------------------------------------------

: bit  dup constant  1 lshift ;

\ attributes
1
bit AUTOPOS#    \ auto-positioned element
bit VISIBLE#    \ contents visible when not in edit mode
bit EDITABLE#   \ contents and data can be modified in edit mode
bit FIXED#     \ cannot be moved or resized in edit mode
bit LOCKED#    \ cannot be deleted
bit UTILITY#    \ cannot be inspected or serialized
drop

\ static attributes
1
bit MODULE#
bit PARENT#
bit MODULE#
drop

\ ------------------------------------------------------------------------------

0 value settings

: settings-var  cell field does> @ settings + ;

0
    settings-var nextpos.x
    settings-var nextpos.y
    settings-var spacing.x
    settings-var spacing.y
    settings-var size.x
    settings-var size.y
    settings-var auto
    settings-var visible
    settings-var attributes
    settings-var lmargin
    settings-var rmargin
    settings-var rowh
    settings-var (pen.x)
    settings-var (pen.y)
    settings-var (fgcolor)
    settings-var (bgcolor)
constant /settings

\ ------------------------------------------------------------------------------

create default-stack  16 /settings * allot&erase

: init-settings
    settings /settings erase
    4 4 spacing.x v!  visible on  1920 rmargin s!  15 (fgcolor) ! ;

default-stack to settings

: !at   at@ (pen.x) 2! ;
: @at   (pen.x) 2@ at ;

: push-settings
   !at
   size.x v@
   /settings +to settings
   init-settings
   size.x v!
   0 0 at
   spacing.x v@ nextpos.x v!
   size.x s@ rmargin s!
   spacing.x s@ dup lmargin s! negate rmargin s+! ;

: pop-settings
   /settings negate +to settings  @at ;

\ ------------------------------------------------------------------------------

: !rowh   rowh s@ size.y s@ max rowh s! ;
: nr      nextpos.x s@ lmargin s@ = ?exit   rowh s@ spacing.y s@ + nextpos.y s+!
  lmargin s@ nextpos.x s!   0 rowh s! ;
: ?nr     nextpos.x s@ size.x s@ + rmargin s@ >= if nr then ;
: auto+   nextpos.x v@ at   size.x s@ spacing.x s@ + nextpos.x s+! !rowh ?nr ;
: ?auto+  auto @ -exit auto+ ;

\ ------------------------------------------------------------------------------

: broadcast  ( xt - ) me each ;
: >local  x v@ 2-  begin  parent @ ?dup while  dup >r -> x v@ 2-  r>  repeat ;
: >global  x v@ 2+  begin  parent @ ?dup while  dup >r -> x v@ 2+  r>  repeat ;
: at-span  x v@ at ;

\ ------------------------------------------------------------------------------

: is-visible?  -> attr @ VISIBLE# and 0<> ;
: shown?  attr @ VISIBLE# and editing @ 0= and ;
: in-viewport?  -1 ; \ mouse 2dup viewport box@ overlap? ;
: hovering?  mouse >local x v@ w v@ 2over 2+ overlap?  in-viewport? and ;
: parent?  kind @ -> cattr @ PARENT# and 0<> ;
: module?  kind @ -> cattr @ MODULE# and 0<> ;
: clickable?  shown? not if  0  exit then  parent? ?dup ?exit hovering? ;

\ ------------------------------------------------------------------------------

: ?draw  shown? -exit  draw ;
: ?mousedown  clickable? if  mousedown  then ;
: ?rmousedown  clickable? if  rmousedown  then ;
: ?click  clickable? if  click  then ;
: ?mousewheel ( n -- n ) clickable? if  dup mousewheel  then ;

\ ------------------------------------------------------------------------------

: !span  ( ?auto+ ) at@ size.x v@ w v! ;
: !colors  (fgcolor) @ fgc! (bgcolor) @ bgc! ;
: !attributes
  attributes @
  auto @ if AUTOPOS# or then
  visible @ if VISIBLE# or then
  attr c! ;

\ ------------------------------------------------------------------------------

: adjoining  ( -- element ) next @ ;
: tsugi  ( element1 -- element2 ) -> next @ ;
: show/hide  ( element -- ) -> attr @ VISIBLE# xor attr ! ;

\ : offsetted ( -- )
\   r>
\   viewport box@ 2>r 2>r 
\   offset xy 2>r  span xy offset +xy
\     call
\   2r> offset xy!
\   2r> 2r> viewport! ;

\ ------------------------------------------------------------------------------

: *element ( kind -- )
  one [[  init  !attributes  !colors  !span  ]] ;

: &  '  >body  state @ if  postpone literal  then ; immediate

\ ------------------------------------------------------------------------------

%element kind: %module ;kind
PARENT# MODULE# or %module cattr !

\ ------------------------------------------------------------------------------

0 value workspace    \ defines the "root" module for display and user interaction
0 value module       \ current module for declaring elements and fields

: switch  dup to module  to workspace ; 

: create-workspace ( -- <name> )  ( -- )
    create %module static,  me switch  does> switch ;

\ ------------------------------------------------------------------------------
    
: lookup  ( container addr c -- 0 | element )
    locals| c addr |  -> first @ [[
    begin  me while
        addr c  me body> >name count  compare 0= if  me ]] exit  then
        module? parent? if
            me addr c recurse ?dup if ]] exit then
        then
        next @ as
    repeat  ]]  false ;

: create-named  ( kind -- <name> )
    create  one as  does>  module swap body> >name count lookup ;

: figure[  ( module -- ws old-module )
    workspace module  push-settings  rot switch ;

: ]figure  ( ws old-module -- )
    pop-settings  to module to workspace   ;

\ %module m: draw         ['] ?draw       (each) ;
%module m: mousedown    ['] ?mousedown  (each) ;
%module m: rmousedown   ['] ?rmousedown (each) ;
%module m: mousewheel   ['] ?mousewheel (each) drop ;
%module m: click        ['] ?click      (each) ;

\ : load-prototype-figure ( -- )
\    module init-region   module-class @ >prototype   module   copy-figure ;
\    
\ : module-instance ( module-prototype -- )
\    create   instance module!   load-prototype-figure   init-module ;

\ ------------------------------------------------------------------------------

root in
create workzone  %actor static,

0 in
create-workspace editor
create-workspace scratchpad
create-workspace home

\ ------------------------------------------------------------------------------

create palette
   0.0e sf, 0.0e sf, 0.0e sf, 1.0e sf, \ black
   0.25e sf, 0.25e sf, 0.25e sf, 1.0e sf, \ dark grey
   0.5e sf, 0.5e sf, 0.5e sf, 1.0e sf, \ grey
   0.75e sf, 0.75e sf, 0.75e sf, 1.0e sf, \ light grey
   
   0.9e sf, 0.2e sf, 0.1e sf, 1.0e sf, \ red
   0.2e sf, 1.0e sf, 0.3e sf, 1.0e sf, \ green
   0.1e sf, 0.1e sf, 0.9e sf, 1.0e sf, \ blue
   1.0e sf, 1.0e sf, 0.5e sf, 1.0e sf, \ yellow

   1.0e sf, 0.5e sf, 0.0e sf, 1.0e sf, \ orange
   0.9e sf, 0.3e sf, 0.8e sf, 1.0e sf, \ purple   
   1.0e sf, 0.5e sf, 0.7e sf, 1.0e sf, \ pink
   0.1e sf, 0.5e sf, 1.0e sf, 1.0e sf, \ cyan   

   1.0e sf, 0.8e sf, 0.6e sf, 1.0e sf, \ beige
   0.9e sf, 0.5e sf, 0.1e sf, 1.0e sf, \ brown
   0.5e sf, 0.5e sf, 0.1e sf, 1.0e sf, \ gold

   1.0e sf, 1.0e sf, 1.0e sf, 1.0e sf,  \ white

0 constant PALETTE_BLACK
4 constant PALETTE_RED
5 constant PALETTE_GREEN
6 constant PALETTE_BLUE
15 constant PALETTE_WHITE

: sf@+  dup cell+ swap sf@ ;
: 4sf@  sf@+ sf@+ sf@+ sf@+ drop ;
: fcolor ( n -- f: r g b a ) 4 cells * palette + 4sf@ ;
: fwhite  1e 1e 1e 1e ;
: fblack  0e 0e 0e 1e ;

\ ------------------------------------------------------------------------------

: draw-button  ( addr c -- )
  w v@  hovering? if  white  rectf  black
          else  black 2dup rectf  white rect  then
  8 8 +at  text ;

: sized  ( x y -- ) size.x v! ;
: +sized  ( x y -- ) size.x v+! ;
: fgcolor  (fgcolor) ! ;
: bgcolor  (bgcolor) ! ;
: strsize  ( zaddr -- w h ) strwidth fontheight ;
: fitstr  ( zaddr -- zaddr ) dup strsize sized ;
: button-sized  ( zaddr -- zaddr ) fitstr 16 16 +sized ;

\ ------------------------------------------------------------------------------
\ mouse

0 value dragging? 
20 stack dragged
create dragstart 0 , 0 ,
variable clickcounter
0 value wdelta

: drag  ( element )
   dragged push  mouse dragstart v!  true to dragging? ; 

: stopdrag
   false to dragging?  dragged clear ;

: ?dragging  ( -- )
  dragging? -exit
  1 mletgo? 2 mletgo? or if  stopdrag  exit  then
  ['] dodrag dragged each ;

: ?clicking ( -- )
  1 mpressed? if
    ['] ?mousedown broadcast
    clickcounter off
  then 
  1 mletgo? if
    clickcounter @ 8 <= if
      ['] ?click broadcast
    then    
  then
  2 mpressed? if
    ['] ?rmousedown broadcast
  then 
  1 clickcounter +! ;
  
: ?wheel ( n -- )
  ['] ?mousewheel broadcast  drop ;

\ ------------------------------------------------------------------------------
\ keyboard

0 value kbfocus \ element

: ?charkey ( n -- )
   kbfocus 0= if drop exit then
   kbfocus [[ charkey ]] ;

\ ------------------------------------------------------------------------------

: cls
   0.5e 0.5e 0.5e 1e al_clear_to_color ;

: (use-mode)
    step>  ?clicking ?dragging
    draw>  cls  workspace [[ draw ]]  
    respond>
        alevt ALLEGRO_EVENT.type @ ALLEGRO_EVENT_KEY_CHAR = if
           alevt KEYBOARD_EVENT.unichar @ ?charkey
        then
        alevt ALLEGRO_EVENT.type @ ALLEGRO_EVENT_MOUSE_AXES = if
           alevt MOUSE_EVENT.dz @ ?dup if ?wheel then
        then ;

: use-mode
    workzone [[ (use-mode) ]] ;
